#!/bin/bash
read -d '' usage <<- EOF
Replacement for qsub to make it behave more rationally and similar to bsub.

In addition to adding -cwd and -V by default (passing current working directory
and environment variables), also by default joins stdout and stderr files if
only a -o option is specified. If you want separate stdout and stderr, simply
add the -e option. It also sets the job validation level to error by default,
which is equivalent to '-w e'.

The dotkits of the local environment are 'reuse'd at the beginning of the
wrapper script sent to qsub, in the same order as locally loaded. This can be
disabled with --nouse.

The convenience argument -n for number of processors will automatically set the
multicore arguments -pe $QSUB_PE n -binding linear:n.

The --profile option will prepend your job logs with host information before job
execution and append resource utilization data at the conclusion of your job.
This is useful to keep track of things like cpu utilization and maximum memory
used during the course of the job.

Use --verbose to see the qsub command and accompanying wrapper script.

All other arguments are passed through to qsub.

Usage:
  qbsub -q short python test.py

Options:
  -n: Number of processors - equivalent to -pe $QSUB_PE n -binding linear:n
  --nocwd: Don't pass -cwd
  --noenv: Don't pass -V
  --nouse: Don't reuse dotkits from current environment
  --nonotify: Don't apply the -notify flag which sends SIGUSR2 before jobs are
    killed (aka send SIGKILL directly on qdel)
  --profile: Profile cpu/mem usage and log jobid/host info.
  --verbose: Print out qsub command and generated wrapper script
  --help: Print the message
  *: Other commands same as qsub

Environment Variables:
  DK_INIT: The path of the dotkit init script - required.
  QBSUB_PROJECT_NAME: Project name to pass to qsub. Can be overriden by the -P
    option.
  QBSUB_PE: Default -pe environment to use - for use with -n.
EOF

source "$DK_INIT"
OPTS=

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help ) echo >&2 "$usage"; exit 1;;
        -o ) STDOUT_PATH="$2"; shift 2 ;;
        -e ) STDERR_PATH="$2"; shift 2 ;;
        -j ) JOIN_OUTPUT="$2"; shift 2 ;;
        -pe ) OPTS+=" -pe $2 $3"; shift 3 ;;
        -q ) OPTS+=" -q $2"; shift 2 ;;
        -p ) OPTS+=" -p $2"; shift 2 ;;
        -P ) PROJECT_NAME="$2"; shift 2 ;;
        -ar ) OPTS+=" -ar $2"; shift 2 ;;
        -r ) OPTS+=" -r $2"; shift 2 ;;
        -R ) OPTS+=" -R $2"; shift 2 ;;
        -l ) OPTS+=" -l $2"; shift 2 ;;
        -N ) OPTS+=" -N $2"; shift 2 ;;
        -m ) OPTS+=" -m $2"; shift 2 ;;
        -M ) OPTS+=" -M $2"; shift 2 ;;
        -w ) VALIDATION="$2"; shift 2 ;;
        -v ) OPTS+=" -v $2"; shift 2 ;;
        -h ) OPTS+=" -h"; shift ;;
        -n ) NPROC="$2"; shift 2;;
        -hold_jid ) OPTS+=" -hold_jid $2"; shift 2 ;;
        -binding ) OPTS+=" -binding $2"; shift 2 ;;
        --profile ) PROFILE=1; shift ;;
        --nonotify ) NO_NOTIFY=1; shift ;;
        --nocwd ) NO_CWD=1; shift ;;
        --noenv ) NO_ENV=1; shift ;;
        --nouse ) NO_USE=1; shift ;;
        --verbose ) VERBOSE=true; shift ;;
        -- ) shift ; break ;;
        * ) break ;;
    esac
done

# Check options
if [[ -z "$STDOUT_PATH" ]]; then
    echo >&2 "No job output path specified (-o output.txt)"
    exit 1
fi

# Set project name by -P, then env var QBSUB_PROJECT_NAME
PROJECT_NAME=${PROJECT_NAME:=$QBSUB_PROJECT_NAME}
[[ -n "$PROJECT_NAME" ]] && OPTS+=" -P $PROJECT_NAME"

# Set pe opts for -n if necessary
[[ -n "$NPROC" ]] && OPTS+=" -pe $QBSUB_PE $NPROC -binding linear:$NPROC"

# Set validation level to error by default
VALIDATION=${VALIDATION:=e}
[[ -n "$VALIDATION" ]] && OPTS+=" -w $VALIDATION"

REUSES=
# Only get top level used dotkits, including hidden dotkits.
# dk_alias comamnds don't respect -q so pipe stderr to /dev/null
if [[ -z "$NO_USE" ]]; then
    REUSES=$(use -a | sed -e '0,/^Packages in use:$/d' -e 's/^  //' -e '/^  /d'  \
                    | tac \
                    | sed -e '/^$/d' -e 's/^[[:space:]]*/reuse -q /' -e 's#$# 2> /dev/null#')
fi

[[ -z "$NO_CWD" ]] && OPTS+=" -cwd"
[[ -z "$NO_ENV" ]] && OPTS+=" -V"
[[ -z "$NO_NOTIFY" ]] && OPTS+=" -notify"

OPTS+=" -o $STDOUT_PATH"
[[ -n "$STDERR_PATH" ]] && OPTS+=" -e $STDERR_PATH"
[[ -z "$JOIN_OUTPUT" && -z "$STDERR_PATH" ]] && JOIN_OUTPUT=y
[[ -n "$JOIN_OUTPUT" ]] && OPTS+=" -j $JOIN_OUTPUT"

# Stop qsub complaining - it will scrub it anyways.
unset LD_LIBRARY_PATH

if [[ -z "$PROFILE" ]]; then
    read -d '' SCRIPT << EOF
#!/bin/bash
source $DK_INIT

$REUSES

$@
EOF

fi

if [[ -n "$PROFILE" ]]; then

    read -d '' SCRIPT << EOF
#!/bin/bash
source $DK_INIT

$REUSES

TIME_RES=\$(mktemp)
function finish {
    # Report resource consumption because it's not reported by default
    echo "================================================================================"
    qstat -j \$JOB_ID | egrep '^exec_host_list|^granted_req|^usage'
    cat "\$TIME_RES" 2> /dev/null
    rm "\$TIME_RES"
    echo "--------------------------------------------------------------------------------"
}

function list_descendants {
    local children=\$(ps -o pid= --ppid "\$1")

    for pid in \$children
    do
        list_descendants "\$pid"
    done

    echo "\$children"
}

function handle_qdel {
    echo "Killed by qdel"
    kill \$(list_descendants \$\$)
}

trap handle_qdel USR2
trap handle_qdel TERM
trap finish EXIT

echo "JOBID	\$JOB_ID"
echo "CPU	\$(cat /proc/cpuinfo | grep 'model name' | head -n 1)"
echo "================================================================================"

/usr/bin/time -o "\$TIME_RES" -v /bin/bash -c "$@" &
wait \$!

EOF

fi

if [[ $VERBOSE == true ]]; then
    cat <<- EOF
qsub command:
  qsub $OPTS

wrapper script:
$SCRIPT
EOF
fi

echo "$SCRIPT" | qsub $OPTS
